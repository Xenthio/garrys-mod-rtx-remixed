if not (BRANCH == "x86-64" or BRANCH == "chromium") then return end
if SERVER then return end

-- RemixMapConfigs: Automatic per-map RTX configuration system
local RemixMapConfigs = {}

-- Configuration
local CONFIG_DIR = "remix_map_configs"
local DEBUG_MODE = CreateClientConVar("rtx_conf_map_configs_debug", "0", true, false, "Enable debug output for map configs")

-- Important RTX config variables to save/load per map
local TRACKED_CONFIGS = {
    -- Lighting
    "rtx.enableRaytracing",
    "rtx.enableDirectLighting", 
    "rtx.enableSecondaryBounces",
    "rtx.pathMaxBounces",
    "rtx.pathMinBounces",
    
    -- Denoising
    "rtx.useDenoiser",
    "rtx.denoiseDirectAndIndirectLightingSeparately",
    "rtx.denoiserMode",
    
    -- Upscaling
    "rtx.upscalerType",
    "rtx.resolutionScale",
    "rtx.qualityDLSS",
    
    -- Volumetrics
    "rtx.volumetrics.enable",
    "rtx.volumetrics.enableAtmosphere",
    "rtx.volumetrics.froxelMaxDistanceMeters",
    
    -- Auto exposure
    "rtx.autoExposure.enabled",
    "rtx.autoExposure.evMinValue",
    "rtx.autoExposure.evMaxValue",
    
    -- Tonemapping
    "rtx.tonemap.exposureBias",
    "rtx.tonemap.dynamicRange",
    "rtx.tonemappingMode",
    
    -- Performance
    "rtx.risLightSampleCount",
    "rtx.di.initialSampleCount",
    "rtx.primaryRayMaxInteractions",
    
    -- Visual effects
    "rtx.bloom.enable",
    "rtx.bloom.burnIntensity",
    "rtx.postfx.enable",
    "rtx.enableFog",
    
    -- UI
    "rtx.defaultToAdvancedUI",
    "rtx.showUI"
}

-- Current map name
local currentMap = ""

-- Utility functions
local function DebugPrint(msg)
    if DEBUG_MODE:GetBool() then
        print("[RTXF2 - Remix API] " .. msg)
    end
end

local function GetCurrentMap()
    return game.GetMap() or ""
end

local function GetConfigPath(mapName)
    return CONFIG_DIR .. "/" .. mapName .. ".txt"
end

-- File I/O functions
local function EnsureConfigDir()
    if not file.Exists(CONFIG_DIR, "DATA") then
        file.CreateDir(CONFIG_DIR)
        DebugPrint("Created config directory: " .. CONFIG_DIR)
    end
end

local function SaveMapConfig(mapName)
    if not RemixConfig then
        DebugPrint("RemixConfig API not available")
        return false
    end
    
    EnsureConfigDir()
    
    -- First, capture current values to populate the cache
    DebugPrint("Capturing current config values...")
    RemixConfig.CaptureCurrentValues()
    
    local configData = {}
    local configLines = {}
    
    -- Add header
    table.insert(configLines, "# RTX Remix configuration for map: " .. mapName)
    table.insert(configLines, "# Generated by RemixMapConfigs addon")
    table.insert(configLines, "# " .. os.date("%Y-%m-%d %H:%M:%S"))
    table.insert(configLines, "")
    table.insert(configLines, "# Note: These are default/cached values. Adjust RTX settings in-game,")
    table.insert(configLines, "# then use RemixConfig.SetCachedValue() or modify this file directly.")
    table.insert(configLines, "")
    
    -- Save each tracked config variable
    local savedCount = 0
    for _, configKey in ipairs(TRACKED_CONFIGS) do
        local value = RemixConfig.GetConfigVariable(configKey)
        if value and value ~= "" then
            configData[configKey] = value
            table.insert(configLines, configKey .. " = " .. value)
            DebugPrint("Saved " .. configKey .. " = " .. value)
            savedCount = savedCount + 1
        else
            DebugPrint("Skipped " .. configKey .. " (no value)")
        end
    end
    
    -- Write to file
    local configText = table.concat(configLines, "\n")
    local filePath = GetConfigPath(mapName)
    
    file.Write(filePath, configText)
    
    DebugPrint("Saved config for map '" .. mapName .. "' to " .. filePath)
    print("[RTXF2 - Remix API] Saved " .. savedCount .. " RTX settings for map: " .. mapName)
    
    if savedCount == 0 then
        print("[RTXF2 - Remix API] Warning: No config values were saved. Try adjusting RTX settings first, or check if RemixConfig API is working.")
    end
    
    return savedCount > 0
end

local function LoadMapConfig(mapName)
    if not RemixConfig then
        DebugPrint("RemixConfig API not available")
        return false
    end
    
    local filePath = GetConfigPath(mapName)
    
    if not file.Exists(filePath, "DATA") then
        DebugPrint("No config file found for map: " .. mapName)
        return false
    end
    
    local configText = file.Read(filePath, "DATA")
    if not configText then
        DebugPrint("Failed to read config file: " .. filePath)
        return false
    end
    
    DebugPrint("Loading config for map: " .. mapName)
    
    -- Parse config file
    local loadedCount = 0
    for line in string.gmatch(configText, "[^\r\n]+") do
        line = string.Trim(line)
        
        -- Skip comments and empty lines
        if line ~= "" and not string.StartWith(line, "#") then
            -- Parse key = value
            local key, value = string.match(line, "^(%S+)%s*=%s*(.+)$")
            if key and value then
                -- Remove any trailing comments
                value = string.match(value, "^([^#]+)") or value
                value = string.Trim(value)
                
                -- Set the config variable
                if RemixConfig.SetConfigVariable(key, value) then
                    DebugPrint("Loaded " .. key .. " = " .. value)
                    loadedCount = loadedCount + 1
                else
                    DebugPrint("Failed to set " .. key .. " = " .. value)
                end
            end
        end
    end
    
    print("[RTXF2 - Remix API] Loaded " .. loadedCount .. " RTX settings for map: " .. mapName)
    return loadedCount > 0
end

-- Public API
function RemixMapConfigs.SaveCurrentMapConfig()
    local mapName = GetCurrentMap()
    if mapName == "" then
        print("[RTXF2 - Remix API] Error: No map loaded")
        return false
    end
    
    return SaveMapConfig(mapName)
end

function RemixMapConfigs.LoadCurrentMapConfig()
    local mapName = GetCurrentMap()
    if mapName == "" then
        print("[RTXF2 - Remix API] Error: No map loaded")
        return false
    end
    
    return LoadMapConfig(mapName)
end

function RemixMapConfigs.SaveMapConfig(mapName)
    if not mapName or mapName == "" then
        print("[RTXF2 - Remix API] Error: Invalid map name")
        return false
    end
    
    return SaveMapConfig(mapName)
end

function RemixMapConfigs.LoadMapConfig(mapName)
    if not mapName or mapName == "" then
        print("[RTXF2 - Remix API] Error: Invalid map name")
        return false
    end
    
    return LoadMapConfig(mapName)
end

function RemixMapConfigs.ListConfigs()
    local files, _ = file.Find(CONFIG_DIR .. "/*.txt", "DATA")
    
    if not files or #files == 0 then
        print("[RTXF2 - Remix API] No saved map configs found")
        return {}
    end
    
    print("[RTXF2 - Remix API] Saved map configs:")
    local mapNames = {}
    
    for _, fileName in ipairs(files) do
        local mapName = string.StripExtension(fileName)
        table.insert(mapNames, mapName)
        print("  - " .. mapName)
    end
    
    return mapNames
end

function RemixMapConfigs.DeleteMapConfig(mapName)
    if not mapName or mapName == "" then
        print("[RTXF2 - Remix API] Error: Invalid map name")
        return false
    end
    
    local filePath = GetConfigPath(mapName)
    
    if not file.Exists(filePath, "DATA") then
        print("[RTXF2 - Remix API] No config found for map: " .. mapName)
        return false
    end
    
    file.Delete(filePath)
    print("[RTXF2 - Remix API] Deleted config for map: " .. mapName)
    return true
end

-- Event handlers
local function OnMapStart()
    timer.Simple(1, function() -- Wait a moment for everything to load
        currentMap = GetCurrentMap()
        DebugPrint("Map started: " .. currentMap)
        
        -- Automatically load config for this map
        LoadMapConfig(currentMap)
    end)
end

local function OnMapCleanup()
    DebugPrint("Map cleanup: " .. currentMap)
    -- Could auto-save here if desired
end

-- Hook into map events
hook.Add("InitPostEntity", "RemixMapConfigs_MapStart", OnMapStart)
hook.Add("PreCleanupMap", "RemixMapConfigs_MapCleanup", OnMapCleanup)

-- Console commands
concommand.Add("rtx_conf_save_map_config", function()
    RemixMapConfigs.SaveCurrentMapConfig()
end, nil, "Save current RTX settings for this map")

concommand.Add("rtx_conf_load_map_config", function()
    RemixMapConfigs.LoadCurrentMapConfig()
end, nil, "Load RTX settings for this map")

concommand.Add("rtx_conf_list_map_configs", function()
    RemixMapConfigs.ListConfigs()
end, nil, "List all saved map configs")

concommand.Add("rtx_conf_delete_map_config", function(ply, cmd, args)
    if #args < 1 then
        print("Usage: remix_delete_map_config <mapname>")
        return
    end
    
    RemixMapConfigs.DeleteMapConfig(args[1])
end, nil, "Delete config for specified map")

concommand.Add("rtx_conf_capture_values", function()
    if not RemixConfig then
        print("[RTXF2 - Remix API] RemixConfig API not available")
        return
    end
    
    RemixConfig.CaptureCurrentValues()
    print("[RTXF2 - Remix API] Captured current RTX settings into cache")
    print("You can now save these settings with: remix_save_map_config")
end, nil, "Capture current RTX settings for saving")

concommand.Add("rtx_conf_set_cached_value", function(ply, cmd, args)
    if not RemixConfig then
        print("[RTXF2 - Remix API] RemixConfig API not available")
        return
    end
    
    if #args < 2 then
        print("Usage: remix_set_cached_value <key> <value>")
        print("Example: remix_set_cached_value rtx.pathMaxBounces 6")
        return
    end
    
    local key = args[1]
    local value = args[2]
    
    RemixConfig.SetCachedValue(key, value)
    print("[RTXF2 - Remix API] Set cached value: " .. key .. " = " .. value)
end, nil, "Set a cached config value for saving")

-- Make API globally available
_G.RemixMapConfigs = RemixMapConfigs

print("[RTXF2 - Remix API] Addon loaded - Automatic per-map RTX configuration system ready")
print("Commands: remix_save_map_config, remix_load_map_config, remix_list_map_configs, remix_delete_map_config")
print("Additional: remix_capture_values, remix_set_cached_value") 